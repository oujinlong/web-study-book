/**
 * @param {number} n
 * @param {number} k
 * @return {number}
 */
//  第一行: 0
// 第二行: 01
// 第三行: 0110
// 第四行: 01101001
//.       0110011001
//    01101001011010010110
//    0110100110010110011010011001011001101001
//    01101001100101101001011001101001011010011001011010010110011010010110100110010110
var kthGrammar = function (n, k) {

  //k是偶数的话 第 N 行 第 K 个 是 第 N -1 行 第 k / 2 个变来的
  //k是奇数的话 第 N 行 第 K 个 是 第 N -1 行 第 (k + 1) / 2 个变来的
  //逆推
  if (n === 1) {
    if (k === 1) {
      return 0
    } else {
      return 1
    }
  }

  if (k % 2 === 0) {
    // **n - 1 演变的数字如果是 0，那么在第 n 行就会产生 01两个数， k是偶数那这个数就是 1， k 是奇数那这个数就是 0**
    // **n - 1 演变的数字如果是 1，那么在第 n 行就会产生 10两个数， k是偶数那这个数就是 0， k 是奇数那这个数就是 1**
    return kthGrammar(n - 1, k / 2) === 1 ? 0 : 1
  } else {
    return kthGrammar(n - 1, (k + 1) / 2) === 1 ? 1 : 0
  }
};

